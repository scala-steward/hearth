package hearth
package typed

import hearth.cq.CrossQuotesMacros
import scala.language.experimental.macros

private[typed] trait TypeConstructors { this: MacroCommons =>

  trait Ctors { this: Type.type =>
    // format: off

    /* Type constructors for some common types.
      
    The code below was not written by hand, but generated by a script. If you need to modify it, modify the script instead, and rerun it.

    {{{
    val itoa = " ABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray.map(_.toString)

    def printCtor(n: Int): String = {
      def nTimes = (1 to n)
      def mk(f: Int => String): String = nTimes.map(f).mkString(", ") 
      def repeat(str: String): String = mk(_ => str)

      s"""    final type Ctor$n[HKT[${repeat("_")}]] = Ctor$n.Bounded[${repeat("Nothing, Any")}, HKT]
        |    object Ctor$n {
        |
        |      def of[HKT[${mk(i => s"_")}]]: Ctor$n[HKT] = macro CrossQuotesMacros.typeCtor${n}Impl[${mk(i => s"Nothing, Any")}, HKT]
        |
        |      /** Allow applying and extracting some types `${mk(i => s"L$i <:< ? <:< U$i")}` */
        |      trait Bounded[${mk(i => s"L$i, U$i >: L$i")}, HKT[${mk(i => s"_ >: L$i <: U$i")}]] {
        |        
        |        def apply[${mk(i => s"${itoa(i)} >: L$i <: U$i: Type")}]: Type[HKT[${mk(itoa)}]]
        |        def unapply[A](A: Type[A]): Option[(${mk(i => s"L$i <:??<: U$i")})]
        |      }
        |      object Bounded {
        |
        |        def of[${mk(i => s"L$i, U$i >: L$i")}, HKT[${mk(i => s"_ >: L$i <: U$i")}]]: Bounded[${mk(i => s"L$i, U$i")}, HKT] = macro CrossQuotesMacros.typeCtor${n}Impl[${mk(i => s"L$i, U$i")}, HKT]
        |      }
        |
        |      final type UpperBounded[${mk(i => s"U$i")}, HKT[${mk(i => s"_ <: U$i")}]] = Bounded[${mk(i => s"Nothing, U$i")}, HKT]
        |      object UpperBounded {
        |
        |        def of[${mk(i => s"U$i")}, HKT[${mk(i => s"_ <: U$i")}]]: UpperBounded[${mk(i => s"U$i")}, HKT] = macro CrossQuotesMacros.typeCtor${n}Impl[${mk(i => s"Nothing, U$i")}, HKT]
        |      }
        |    }
        |""".stripMargin
    }

    (1 to 22).map(printCtor).foreach(println(_))
    }}}
    */

    final type Ctor1[HKT[_]] = Ctor1.Bounded[Nothing, Any, HKT]
    object Ctor1 {

      def of[HKT[_]]: Ctor1[HKT] = macro CrossQuotesMacros.typeCtor1Impl[Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1` */
      trait Bounded[L1, U1 >: L1, HKT[_ >: L1 <: U1]] {

        def apply[A >: L1 <: U1: Type]: Type[HKT[A]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1)]
      }
      object Bounded {

        def of[L1, U1 >: L1, HKT[_ >: L1 <: U1]]: Bounded[L1, U1, HKT] = macro CrossQuotesMacros.typeCtor1Impl[L1, U1, HKT]
      }

      final type UpperBounded[U1, HKT[_ <: U1]] = Bounded[Nothing, U1, HKT]
      object UpperBounded {

        def of[U1, HKT[_ <: U1]]: UpperBounded[U1, HKT] = macro CrossQuotesMacros.typeCtor1Impl[Nothing, U1, HKT]
      }
    }

    final type Ctor2[HKT[_, _]] = Ctor2.Bounded[Nothing, Any, Nothing, Any, HKT]
    object Ctor2 {

      def of[HKT[_, _]]: Ctor2[HKT] = macro CrossQuotesMacros.typeCtor2Impl[Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, HKT[_ >: L1 <: U1, _ >: L2 <: U2]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type]: Type[HKT[A, B]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, HKT[_ >: L1 <: U1, _ >: L2 <: U2]]: Bounded[L1, U1, L2, U2, HKT] = macro CrossQuotesMacros.typeCtor2Impl[L1, U1, L2, U2, HKT]
      }

      final type UpperBounded[U1, U2, HKT[_ <: U1, _ <: U2]] = Bounded[Nothing, U1, Nothing, U2, HKT]
      object UpperBounded {

        def of[U1, U2, HKT[_ <: U1, _ <: U2]]: UpperBounded[U1, U2, HKT] = macro CrossQuotesMacros.typeCtor2Impl[Nothing, U1, Nothing, U2, HKT]
      }
    }

    final type Ctor3[HKT[_, _, _]] = Ctor3.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor3 {

      def of[HKT[_, _, _]]: Ctor3[HKT] = macro CrossQuotesMacros.typeCtor3Impl[Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type]: Type[HKT[A, B, C]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3]]: Bounded[L1, U1, L2, U2, L3, U3, HKT] = macro CrossQuotesMacros.typeCtor3Impl[L1, U1, L2, U2, L3, U3, HKT]
      }

      final type UpperBounded[U1, U2, U3, HKT[_ <: U1, _ <: U2, _ <: U3]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, HKT]
      object UpperBounded {

        def of[U1, U2, U3, HKT[_ <: U1, _ <: U2, _ <: U3]]: UpperBounded[U1, U2, U3, HKT] = macro CrossQuotesMacros.typeCtor3Impl[Nothing, U1, Nothing, U2, Nothing, U3, HKT]
      }
    }

    final type Ctor4[HKT[_, _, _, _]] = Ctor4.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor4 {

      def of[HKT[_, _, _, _]]: Ctor4[HKT] = macro CrossQuotesMacros.typeCtor4Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type]: Type[HKT[A, B, C, D]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, HKT] = macro CrossQuotesMacros.typeCtor4Impl[L1, U1, L2, U2, L3, U3, L4, U4, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4]]: UpperBounded[U1, U2, U3, U4, HKT] = macro CrossQuotesMacros.typeCtor4Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, HKT]
      }
    }

    final type Ctor5[HKT[_, _, _, _, _]] = Ctor5.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor5 {

      def of[HKT[_, _, _, _, _]]: Ctor5[HKT] = macro CrossQuotesMacros.typeCtor5Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type]: Type[HKT[A, B, C, D, E]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, HKT] = macro CrossQuotesMacros.typeCtor5Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5]]: UpperBounded[U1, U2, U3, U4, U5, HKT] = macro CrossQuotesMacros.typeCtor5Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, HKT]
      }
    }

    final type Ctor6[HKT[_, _, _, _, _, _]] = Ctor6.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor6 {

      def of[HKT[_, _, _, _, _, _]]: Ctor6[HKT] = macro CrossQuotesMacros.typeCtor6Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type]: Type[HKT[A, B, C, D, E, F]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, HKT] = macro CrossQuotesMacros.typeCtor6Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6]]: UpperBounded[U1, U2, U3, U4, U5, U6, HKT] = macro CrossQuotesMacros.typeCtor6Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, HKT]
      }
    }

    final type Ctor7[HKT[_, _, _, _, _, _, _]] = Ctor7.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor7 {

      def of[HKT[_, _, _, _, _, _, _]]: Ctor7[HKT] = macro CrossQuotesMacros.typeCtor7Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type]: Type[HKT[A, B, C, D, E, F, G]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, HKT] = macro CrossQuotesMacros.typeCtor7Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, HKT] = macro CrossQuotesMacros.typeCtor7Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, HKT]
      }
    }

    final type Ctor8[HKT[_, _, _, _, _, _, _, _]] = Ctor8.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor8 {

      def of[HKT[_, _, _, _, _, _, _, _]]: Ctor8[HKT] = macro CrossQuotesMacros.typeCtor8Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type]: Type[HKT[A, B, C, D, E, F, G, H]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, HKT] = macro CrossQuotesMacros.typeCtor8Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, HKT] = macro CrossQuotesMacros.typeCtor8Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, HKT]
      }
    }

    final type Ctor9[HKT[_, _, _, _, _, _, _, _, _]] = Ctor9.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor9 {

      def of[HKT[_, _, _, _, _, _, _, _, _]]: Ctor9[HKT] = macro CrossQuotesMacros.typeCtor9Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type]: Type[HKT[A, B, C, D, E, F, G, H, I]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, HKT] = macro CrossQuotesMacros.typeCtor9Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, HKT] = macro CrossQuotesMacros.typeCtor9Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, HKT]
      }
    }

    final type Ctor10[HKT[_, _, _, _, _, _, _, _, _, _]] = Ctor10.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor10 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _]]: Ctor10[HKT] = macro CrossQuotesMacros.typeCtor10Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, HKT] = macro CrossQuotesMacros.typeCtor10Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, HKT] = macro CrossQuotesMacros.typeCtor10Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, HKT]
      }
    }

    final type Ctor11[HKT[_, _, _, _, _, _, _, _, _, _, _]] = Ctor11.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor11 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _]]: Ctor11[HKT] = macro CrossQuotesMacros.typeCtor11Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, HKT] = macro CrossQuotesMacros.typeCtor11Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, HKT] = macro CrossQuotesMacros.typeCtor11Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, HKT]
      }
    }

    final type Ctor12[HKT[_, _, _, _, _, _, _, _, _, _, _, _]] = Ctor12.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor12 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _]]: Ctor12[HKT] = macro CrossQuotesMacros.typeCtor12Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, HKT] = macro CrossQuotesMacros.typeCtor12Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, HKT] = macro CrossQuotesMacros.typeCtor12Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, HKT]
      }
    }

    final type Ctor13[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _]] = Ctor13.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor13 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _]]: Ctor13[HKT] = macro CrossQuotesMacros.typeCtor13Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12, L13 <:< ? <:< U13` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type, M >: L13 <: U13: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L, M]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12, L13 <:??<: U13)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, HKT] = macro CrossQuotesMacros.typeCtor13Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, HKT] = macro CrossQuotesMacros.typeCtor13Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, HKT]
      }
    }

    final type Ctor14[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _]] = Ctor14.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor14 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _]]: Ctor14[HKT] = macro CrossQuotesMacros.typeCtor14Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12, L13 <:< ? <:< U13, L14 <:< ? <:< U14` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type, M >: L13 <: U13: Type, N >: L14 <: U14: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L, M, N]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12, L13 <:??<: U13, L14 <:??<: U14)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, HKT] = macro CrossQuotesMacros.typeCtor14Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, HKT] = macro CrossQuotesMacros.typeCtor14Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, HKT]
      }
    }

    final type Ctor15[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _]] = Ctor15.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor15 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _]]: Ctor15[HKT] = macro CrossQuotesMacros.typeCtor15Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12, L13 <:< ? <:< U13, L14 <:< ? <:< U14, L15 <:< ? <:< U15` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type, M >: L13 <: U13: Type, N >: L14 <: U14: Type, O >: L15 <: U15: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12, L13 <:??<: U13, L14 <:??<: U14, L15 <:??<: U15)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, HKT] = macro CrossQuotesMacros.typeCtor15Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, HKT] = macro CrossQuotesMacros.typeCtor15Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, HKT]
      }
    }

    final type Ctor16[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]] = Ctor16.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor16 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]]: Ctor16[HKT] = macro CrossQuotesMacros.typeCtor16Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12, L13 <:< ? <:< U13, L14 <:< ? <:< U14, L15 <:< ? <:< U15, L16 <:< ? <:< U16` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type, M >: L13 <: U13: Type, N >: L14 <: U14: Type, O >: L15 <: U15: Type, P >: L16 <: U16: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12, L13 <:??<: U13, L14 <:??<: U14, L15 <:??<: U15, L16 <:??<: U16)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, HKT] = macro CrossQuotesMacros.typeCtor16Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, HKT] = macro CrossQuotesMacros.typeCtor16Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, HKT]
      }
    }

    final type Ctor17[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]] = Ctor17.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor17 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]]: Ctor17[HKT] = macro CrossQuotesMacros.typeCtor17Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12, L13 <:< ? <:< U13, L14 <:< ? <:< U14, L15 <:< ? <:< U15, L16 <:< ? <:< U16, L17 <:< ? <:< U17` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type, M >: L13 <: U13: Type, N >: L14 <: U14: Type, O >: L15 <: U15: Type, P >: L16 <: U16: Type, Q >: L17 <: U17: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12, L13 <:??<: U13, L14 <:??<: U14, L15 <:??<: U15, L16 <:??<: U16, L17 <:??<: U17)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, HKT] = macro CrossQuotesMacros.typeCtor17Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, HKT] = macro CrossQuotesMacros.typeCtor17Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, HKT]
      }
    }

    final type Ctor18[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]] = Ctor18.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor18 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]]: Ctor18[HKT] = macro CrossQuotesMacros.typeCtor18Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12, L13 <:< ? <:< U13, L14 <:< ? <:< U14, L15 <:< ? <:< U15, L16 <:< ? <:< U16, L17 <:< ? <:< U17, L18 <:< ? <:< U18` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, L18, U18 >: L18, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17, _ >: L18 <: U18]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type, M >: L13 <: U13: Type, N >: L14 <: U14: Type, O >: L15 <: U15: Type, P >: L16 <: U16: Type, Q >: L17 <: U17: Type, R >: L18 <: U18: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12, L13 <:??<: U13, L14 <:??<: U14, L15 <:??<: U15, L16 <:??<: U16, L17 <:??<: U17, L18 <:??<: U18)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, L18, U18 >: L18, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17, _ >: L18 <: U18]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, L18, U18, HKT] = macro CrossQuotesMacros.typeCtor18Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, L18, U18, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17, _ <: U18]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, Nothing, U18, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17, _ <: U18]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, HKT] = macro CrossQuotesMacros.typeCtor18Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, Nothing, U18, HKT]
      }
    }

    final type Ctor19[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]] = Ctor19.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor19 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]]: Ctor19[HKT] = macro CrossQuotesMacros.typeCtor19Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12, L13 <:< ? <:< U13, L14 <:< ? <:< U14, L15 <:< ? <:< U15, L16 <:< ? <:< U16, L17 <:< ? <:< U17, L18 <:< ? <:< U18, L19 <:< ? <:< U19` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, L18, U18 >: L18, L19, U19 >: L19, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17, _ >: L18 <: U18, _ >: L19 <: U19]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type, M >: L13 <: U13: Type, N >: L14 <: U14: Type, O >: L15 <: U15: Type, P >: L16 <: U16: Type, Q >: L17 <: U17: Type, R >: L18 <: U18: Type, S >: L19 <: U19: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12, L13 <:??<: U13, L14 <:??<: U14, L15 <:??<: U15, L16 <:??<: U16, L17 <:??<: U17, L18 <:??<: U18, L19 <:??<: U19)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, L18, U18 >: L18, L19, U19 >: L19, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17, _ >: L18 <: U18, _ >: L19 <: U19]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, L18, U18, L19, U19, HKT] = macro CrossQuotesMacros.typeCtor19Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, L18, U18, L19, U19, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17, _ <: U18, _ <: U19]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, Nothing, U18, Nothing, U19, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17, _ <: U18, _ <: U19]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, HKT] = macro CrossQuotesMacros.typeCtor19Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, Nothing, U18, Nothing, U19, HKT]
      }
    }

    final type Ctor20[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]] = Ctor20.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor20 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]]: Ctor20[HKT] = macro CrossQuotesMacros.typeCtor20Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12, L13 <:< ? <:< U13, L14 <:< ? <:< U14, L15 <:< ? <:< U15, L16 <:< ? <:< U16, L17 <:< ? <:< U17, L18 <:< ? <:< U18, L19 <:< ? <:< U19, L20 <:< ? <:< U20` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, L18, U18 >: L18, L19, U19 >: L19, L20, U20 >: L20, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17, _ >: L18 <: U18, _ >: L19 <: U19, _ >: L20 <: U20]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type, M >: L13 <: U13: Type, N >: L14 <: U14: Type, O >: L15 <: U15: Type, P >: L16 <: U16: Type, Q >: L17 <: U17: Type, R >: L18 <: U18: Type, S >: L19 <: U19: Type, T >: L20 <: U20: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12, L13 <:??<: U13, L14 <:??<: U14, L15 <:??<: U15, L16 <:??<: U16, L17 <:??<: U17, L18 <:??<: U18, L19 <:??<: U19, L20 <:??<: U20)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, L18, U18 >: L18, L19, U19 >: L19, L20, U20 >: L20, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17, _ >: L18 <: U18, _ >: L19 <: U19, _ >: L20 <: U20]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, L18, U18, L19, U19, L20, U20, HKT] = macro CrossQuotesMacros.typeCtor20Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, L18, U18, L19, U19, L20, U20, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, U20, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17, _ <: U18, _ <: U19, _ <: U20]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, Nothing, U18, Nothing, U19, Nothing, U20, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, U20, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17, _ <: U18, _ <: U19, _ <: U20]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, U20, HKT] = macro CrossQuotesMacros.typeCtor20Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, Nothing, U18, Nothing, U19, Nothing, U20, HKT]
      }
    }

    final type Ctor21[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]] = Ctor21.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor21 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]]: Ctor21[HKT] = macro CrossQuotesMacros.typeCtor21Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12, L13 <:< ? <:< U13, L14 <:< ? <:< U14, L15 <:< ? <:< U15, L16 <:< ? <:< U16, L17 <:< ? <:< U17, L18 <:< ? <:< U18, L19 <:< ? <:< U19, L20 <:< ? <:< U20, L21 <:< ? <:< U21` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, L18, U18 >: L18, L19, U19 >: L19, L20, U20 >: L20, L21, U21 >: L21, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17, _ >: L18 <: U18, _ >: L19 <: U19, _ >: L20 <: U20, _ >: L21 <: U21]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type, M >: L13 <: U13: Type, N >: L14 <: U14: Type, O >: L15 <: U15: Type, P >: L16 <: U16: Type, Q >: L17 <: U17: Type, R >: L18 <: U18: Type, S >: L19 <: U19: Type, T >: L20 <: U20: Type, U >: L21 <: U21: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12, L13 <:??<: U13, L14 <:??<: U14, L15 <:??<: U15, L16 <:??<: U16, L17 <:??<: U17, L18 <:??<: U18, L19 <:??<: U19, L20 <:??<: U20, L21 <:??<: U21)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, L18, U18 >: L18, L19, U19 >: L19, L20, U20 >: L20, L21, U21 >: L21, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17, _ >: L18 <: U18, _ >: L19 <: U19, _ >: L20 <: U20, _ >: L21 <: U21]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, L18, U18, L19, U19, L20, U20, L21, U21, HKT] = macro CrossQuotesMacros.typeCtor21Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, L18, U18, L19, U19, L20, U20, L21, U21, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, U20, U21, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17, _ <: U18, _ <: U19, _ <: U20, _ <: U21]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, Nothing, U18, Nothing, U19, Nothing, U20, Nothing, U21, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, U20, U21, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17, _ <: U18, _ <: U19, _ <: U20, _ <: U21]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, U20, U21, HKT] = macro CrossQuotesMacros.typeCtor21Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, Nothing, U18, Nothing, U19, Nothing, U20, Nothing, U21, HKT]
      }
    }

    final type Ctor22[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]] = Ctor22.Bounded[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]
    object Ctor22 {

      def of[HKT[_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _]]: Ctor22[HKT] = macro CrossQuotesMacros.typeCtor22Impl[Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, Nothing, Any, HKT]

      /** Allow applying and extracting some types `L1 <:< ? <:< U1, L2 <:< ? <:< U2, L3 <:< ? <:< U3, L4 <:< ? <:< U4, L5 <:< ? <:< U5, L6 <:< ? <:< U6, L7 <:< ? <:< U7, L8 <:< ? <:< U8, L9 <:< ? <:< U9, L10 <:< ? <:< U10, L11 <:< ? <:< U11, L12 <:< ? <:< U12, L13 <:< ? <:< U13, L14 <:< ? <:< U14, L15 <:< ? <:< U15, L16 <:< ? <:< U16, L17 <:< ? <:< U17, L18 <:< ? <:< U18, L19 <:< ? <:< U19, L20 <:< ? <:< U20, L21 <:< ? <:< U21, L22 <:< ? <:< U22` */
      trait Bounded[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, L18, U18 >: L18, L19, U19 >: L19, L20, U20 >: L20, L21, U21 >: L21, L22, U22 >: L22, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17, _ >: L18 <: U18, _ >: L19 <: U19, _ >: L20 <: U20, _ >: L21 <: U21, _ >: L22 <: U22]] {

        def apply[A >: L1 <: U1: Type, B >: L2 <: U2: Type, C >: L3 <: U3: Type, D >: L4 <: U4: Type, E >: L5 <: U5: Type, F >: L6 <: U6: Type, G >: L7 <: U7: Type, H >: L8 <: U8: Type, I >: L9 <: U9: Type, J >: L10 <: U10: Type, K >: L11 <: U11: Type, L >: L12 <: U12: Type, M >: L13 <: U13: Type, N >: L14 <: U14: Type, O >: L15 <: U15: Type, P >: L16 <: U16: Type, Q >: L17 <: U17: Type, R >: L18 <: U18: Type, S >: L19 <: U19: Type, T >: L20 <: U20: Type, U >: L21 <: U21: Type, V >: L22 <: U22: Type]: Type[HKT[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]]
        def unapply[A](A: Type[A]): Option[(L1 <:??<: U1, L2 <:??<: U2, L3 <:??<: U3, L4 <:??<: U4, L5 <:??<: U5, L6 <:??<: U6, L7 <:??<: U7, L8 <:??<: U8, L9 <:??<: U9, L10 <:??<: U10, L11 <:??<: U11, L12 <:??<: U12, L13 <:??<: U13, L14 <:??<: U14, L15 <:??<: U15, L16 <:??<: U16, L17 <:??<: U17, L18 <:??<: U18, L19 <:??<: U19, L20 <:??<: U20, L21 <:??<: U21, L22 <:??<: U22)]
      }
      object Bounded {

        def of[L1, U1 >: L1, L2, U2 >: L2, L3, U3 >: L3, L4, U4 >: L4, L5, U5 >: L5, L6, U6 >: L6, L7, U7 >: L7, L8, U8 >: L8, L9, U9 >: L9, L10, U10 >: L10, L11, U11 >: L11, L12, U12 >: L12, L13, U13 >: L13, L14, U14 >: L14, L15, U15 >: L15, L16, U16 >: L16, L17, U17 >: L17, L18, U18 >: L18, L19, U19 >: L19, L20, U20 >: L20, L21, U21 >: L21, L22, U22 >: L22, HKT[_ >: L1 <: U1, _ >: L2 <: U2, _ >: L3 <: U3, _ >: L4 <: U4, _ >: L5 <: U5, _ >: L6 <: U6, _ >: L7 <: U7, _ >: L8 <: U8, _ >: L9 <: U9, _ >: L10 <: U10, _ >: L11 <: U11, _ >: L12 <: U12, _ >: L13 <: U13, _ >: L14 <: U14, _ >: L15 <: U15, _ >: L16 <: U16, _ >: L17 <: U17, _ >: L18 <: U18, _ >: L19 <: U19, _ >: L20 <: U20, _ >: L21 <: U21, _ >: L22 <: U22]]: Bounded[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, L18, U18, L19, U19, L20, U20, L21, U21, L22, U22, HKT] = macro CrossQuotesMacros.typeCtor22Impl[L1, U1, L2, U2, L3, U3, L4, U4, L5, U5, L6, U6, L7, U7, L8, U8, L9, U9, L10, U10, L11, U11, L12, U12, L13, U13, L14, U14, L15, U15, L16, U16, L17, U17, L18, U18, L19, U19, L20, U20, L21, U21, L22, U22, HKT]
      }

      final type UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, U20, U21, U22, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17, _ <: U18, _ <: U19, _ <: U20, _ <: U21, _ <: U22]] = Bounded[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, Nothing, U18, Nothing, U19, Nothing, U20, Nothing, U21, Nothing, U22, HKT]
      object UpperBounded {

        def of[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, U20, U21, U22, HKT[_ <: U1, _ <: U2, _ <: U3, _ <: U4, _ <: U5, _ <: U6, _ <: U7, _ <: U8, _ <: U9, _ <: U10, _ <: U11, _ <: U12, _ <: U13, _ <: U14, _ <: U15, _ <: U16, _ <: U17, _ <: U18, _ <: U19, _ <: U20, _ <: U21, _ <: U22]]: UpperBounded[U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11, U12, U13, U14, U15, U16, U17, U18, U19, U20, U21, U22, HKT] = macro CrossQuotesMacros.typeCtor22Impl[Nothing, U1, Nothing, U2, Nothing, U3, Nothing, U4, Nothing, U5, Nothing, U6, Nothing, U7, Nothing, U8, Nothing, U9, Nothing, U10, Nothing, U11, Nothing, U12, Nothing, U13, Nothing, U14, Nothing, U15, Nothing, U16, Nothing, U17, Nothing, U18, Nothing, U19, Nothing, U20, Nothing, U21, Nothing, U22, HKT]
      }
    }
  }
}
